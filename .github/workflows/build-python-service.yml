name: 构建Python服务

on:
  push:
    branches: [main, master]
    paths:
      - "tyf-tool-service/**" # 仅当tyf-tool-service目录有变更时触发
  # pull_request:
  #   branches: [main, master]
  #   paths:
  #     - "tyf-tool-service/**" # 仅当tyf-tool-service目录有变更时触发
  # 允许手动触发工作流
  workflow_dispatch:

jobs:
  # 构建Mac Intel版本
  build-mac-intel:
    # runs-on: macos-11 # 使用较旧的macOS运行器
    runs-on: macos-13 # 使用Intel架构的macOS 13 runner
    # 对于大型Intel运行器(需要特定计划)，可以使用:
    # runs-on: macos-13-large
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 打印芯片架构信息
        run: |
          # 检查CPU架构
          echo "CPU架构: $(uname -m)"
          echo "芯片: $(sysctl -n machdep.cpu.brand_string)"

      # - name: 设置Python
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: "3.9"
      #     cache: "pip"

      - name: Install Python 3.9 (compiled for macOS 12)
        run: |
          brew install pyenv

          # 1. 确保卸载已有的 Python 3.9.18（避免残留旧版本）
          pyenv uninstall -f 3.9.18 || true

          # 2. 关键：设置编译环境变量，强制适配 macOS 12（必须在安装 Python 前设置）
          export MACOSX_DEPLOYMENT_TARGET=12.0
          export CFLAGS="-mmacosx-version-min=12.0 -D_DARWIN_C_SOURCE"
          export CXXFLAGS="-mmacosx-version-min=12.0 -D_DARWIN_C_SOURCE"
          export LDFLAGS="-mmacosx-version-min=12.0"

          # 3. 用 pyenv 安装 Python 3.9.18（此时会应用上述环境变量编译，确保适配 macOS 12）
          export PYTHON_CONFIGURE_OPTS="--enable-shared"
          pyenv install 3.9.18

          # 4. 切换到 pyenv 安装的 Python 3.9.18，确保后续步骤使用该版本
          pyenv global 3.9.18
          PYENV_PYTHON_PATH=$(pyenv which python)
          echo "使用的 Python 路径: $PYENV_PYTHON_PATH"
          echo "$(pyenv root)/shims" >> $GITHUB_PATH  # 确保 pyenv 的 Python 优先级最高

          # 5. 修正：直接拼接 pyenv 安装路径下的 libpython3.9.dylib（避免路径检测错误）
          PYTHON_LIB_DIR="$HOME/.pyenv/versions/3.9.18/lib"
          PYTHON_LIB="$PYTHON_LIB_DIR/libpython3.9.dylib"
          echo "Python 共享库路径: $PYTHON_LIB"

          # 6. 验证 1：检查共享库是否存在
          if [ ! -f "$PYTHON_LIB" ]; then
            echo "错误：Python 共享库不存在！"
            ls -l "$PYTHON_LIB_DIR"  # 列出目录内容，辅助排查
            exit 1
          fi

          # 7. 验证 2：检查共享库的最低支持 macOS 版本（需输出 Version: 12.0）
          echo "=== 验证共享库最低支持版本 ==="
          otool -l "$PYTHON_LIB" | grep -A 3 LC_VERSION_MIN_MACOSX

          # 8. 验证 3：检查是否包含 _mkfifoat 符号（无输出则成功）
          echo "=== 验证是否包含 _mkfifoat 符号 ==="
          nm -g "$PYTHON_LIB" | grep _mkfifoat || echo "✓ 未检测到 _mkfifoat 符号（符合预期）"

      - name: Set deployment target
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=12.0" >> $GITHUB_ENV

      - name: 安装依赖
        run: |
          cd tyf-tool-service
          python -m pip install --upgrade pip
          # pip install -r requirements.txt

          rm -rf build/ dist/ __pycache__/
          pip cache purge

          # 重新安装依赖
          pip install --no-cache-dir -r requirements.txt

          # 自动确认卸载当前PyInstaller版本
          pip uninstall --yes pyinstaller
          pip install --no-cache-dir pyinstaller==5.13

      - name: 构建Mac Intel版本
        run: |
          cd tyf-tool-service
          # 确保target_arch为x86_64
          # sed -i '' 's/target_arch=None/target_arch="x86_64"/' tyf_tool_service.spec

          # 彻底设置部署目标环境变量
          export MACOSX_DEPLOYMENT_TARGET=12.0
          export CFLAGS="-mmacosx-version-min=12.0"
          export CXXFLAGS="-mmacosx-version-min=12.0"

          PYTHONHASHSEED=1 pyinstaller --clean tyf_tool_service.spec
          mkdir -p ../dist/mac-intel
          cp -f dist/tyf_tool_service ../dist/mac-intel/

      - name: 上传Mac Intel构建结果
        uses: actions/upload-artifact@v4
        with:
          name: mac-intel-binaries
          path: dist/mac-intel
          retention-days: 7

  # 构建Mac ARM版本
  build-mac-arm:
    runs-on: macos-14 # 使用ARM架构的macOS runner
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 打印芯片架构信息
        run: |
          # 检查CPU架构
          echo "CPU架构: $(uname -m)"
          echo "芯片: $(sysctl -n machdep.cpu.brand_string)"

      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: "pip"

      - name: 安装依赖
        run: |
          cd tyf-tool-service
          pip install -r requirements.txt

      - name: 构建Mac ARM版本
        run: |
          cd tyf-tool-service
          # 确保target_arch为arm64
          # sed -i '' 's/target_arch=None/target_arch="arm64"/' tyf_tool_service.spec
          PYTHONHASHSEED=1 pyinstaller tyf_tool_service.spec
          mkdir -p ../dist/mac-arm
          cp -f dist/tyf_tool_service ../dist/mac-arm/

      - name: 上传Mac ARM构建结果
        uses: actions/upload-artifact@v4
        with:
          name: mac-arm-binaries
          path: dist/mac-arm
          retention-days: 7

  # 构建Windows版本
  build-windows:
    runs-on: windows-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: "pip"

      - name: 安装依赖
        run: |
          cd tyf-tool-service
          pip install -r requirements.txt

      - name: 构建Windows版本
        run: |
          cd tyf-tool-service
          set PYTHONHASHSEED=1 && pyinstaller tyf_tool_service.spec
          mkdir -p ../dist/windows
          copy dist\tyf_tool_service.exe ..\dist\windows\

      - name: 上传Windows构建结果
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: dist/windows
          retention-days: 7

  # 创建发布版本（可选）
  # create-release:
  #   needs: [build-mac-intel, build-mac-arm, build-windows]
  #   runs-on: ubuntu-latest
  #   # 仅在推送到主分支时创建发布版本
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
  #   steps:
  #     - name: 检出代码
  #       uses: actions/checkout@v4
  #
  #     - name: 下载所有构建结果
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: all-artifacts
  #
  #     - name: 打包所有构建结果
  #       run: |
  #         cd all-artifacts
  #         zip -r ../tyf-tool-service-mac-intel.zip mac-intel-binaries
  #         zip -r ../tyf-tool-service-mac-arm.zip mac-arm-binaries
  #         zip -r ../tyf-tool-service-windows.zip windows-binaries
  #
  #     - name: 创建发布版本
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         name: 构建 ${{ github.sha }}
  #         tag_name: build-${{ github.run_number }}
  #         files: |
  #           tyf-tool-service-mac-intel.zip
  #           tyf-tool-service-mac-arm.zip
  #           tyf-tool-service-windows.zip
  #         draft: false
  #         prerelease: true
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
