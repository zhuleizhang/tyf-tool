name: 构建Electron应用

# 添加权限配置到顶部
permissions:
  contents: write # 允许写入仓库内容（上传产物）
  actions: read # 允许读取Actions（下载其他工作流产物）

on:
  # 在Python服务构建工作流完成后触发
  workflow_run:
    workflows: ["构建Python服务"]
    types:
      - completed
    branches: [main, master]
  push:
    branches: [main, master]
    paths:
      - "src/**"
      - "package.json"
      - "webpack.config.js"
  # pull_request:
  #   branches: [main, master]
  #   paths:
  #     - "src/**"
  #     - "package.json"
  #     - "webpack.config.js"
  # 允许手动触发工作流
  workflow_dispatch:

jobs:
  # 构建Windows应用
  build-windows:
    runs-on: windows-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      # 下载Python服务Windows构建产物
      - name: 下载Python服务Windows构建产物
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build-python-service.yml
          name: windows-binaries
          path: temp_artifacts
          github_token: ${{ secrets.GITHUB_TOKEN }}
          if_no_artifact_found: warn
          # 如果需要从其他仓库下载，确保这是正确的仓库
          # repo: 正确的仓库名称，例如 your-username/your-repo
          # 其他可能有用的配置
          workflow_conclusion: "" # 尝试获取任何状态的运行
          branch: "" # 尝试从任何分支获取
          check_artifacts: true
          search_artifacts: true

      # 确保service_build目录存在
      - name: 创建service_build目录
        run: mkdir -p service_build
        shell: bash

      # 解压并移动文件到service_build
      - name: 处理Python服务文件
        run: |
          if (Test-Path -Path "temp_artifacts") {
            # 创建临时目录用于解压
            New-Item -Path "temp_extracted" -ItemType Directory -Force
            
            # 查找并解压所有zip文件
            Get-ChildItem -Path "temp_artifacts" -Filter "*.zip" | ForEach-Object {
              Write-Host "Extracting $($_.FullName) to temp_extracted"
              Expand-Archive -Path $_.FullName -DestinationPath "temp_extracted" -Force
            }
            
            # 移动解压后的文件到service_build
            if (Test-Path -Path "temp_extracted") {
              Copy-Item -Path "temp_extracted\*" -Destination "service_build" -Recurse -Force
            }
            
            # 复制任何非zip文件
            Get-ChildItem -Path "temp_artifacts" -Exclude "*.zip" | Copy-Item -Destination "service_build" -Recurse -Force
          } else {
            Write-Host "No Python service artifacts found, continuing without them"
          }
        shell: pwsh

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.20.8
          cache: "npm"

      - name: 安装依赖
        run: npm ci

      - name: 构建Windows应用
        run: npm run package:win

      - name: 上传Windows构建结果
        uses: actions/upload-artifact@v4
        with:
          name: windows-app
          path: dist/*.exe
          retention-days: 7

  # 构建Mac Intel版本
  build-mac-intel:
    # runs-on: macos-12 # 使用Intel芯片的macOS运行器
    runs-on: macos-13 # 或 macos-12
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 打印芯片架构信息
        run: |
          # 检查CPU架构
          echo "CPU架构: $(uname -m)"
          echo "芯片: $(sysctl -n machdep.cpu.brand_string)"

      # 下载Python服务Mac Intel构建产物
      - name: 下载Python服务Mac Intel构建产物
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build-python-service.yml
          name: mac-intel-binaries
          path: temp_artifacts
          github_token: ${{ secrets.GITHUB_TOKEN }}
          if_no_artifact_found: warn
          workflow_conclusion: "" # 尝试获取任何状态的运行
          branch: "" # 尝试从任何分支获取
          check_artifacts: true
          search_artifacts: true

      # 确保service_build目录存在
      - name: 创建service_build目录
        run: mkdir -p service_build

      # 解压并移动文件到service_build
      - name: 处理Python服务文件
        run: |
          if [ -d "temp_artifacts" ] && [ "$(ls -A temp_artifacts)" ]; then
            # 创建临时目录用于解压
            mkdir -p temp_extracted

            # 查找并解压所有zip文件
            for zipfile in temp_artifacts/*.zip; do
              if [ -f "$zipfile" ]; then
                echo "Extracting $zipfile to temp_extracted"
                unzip -o "$zipfile" -d temp_extracted
              fi
            done

            # 移动解压后的文件到service_build
            if [ -d "temp_extracted" ] && [ "$(ls -A temp_extracted)" ]; then
              cp -R temp_extracted/* service_build/
            fi

            # 复制任何非zip文件
            find temp_artifacts -type f -not -name "*.zip" -exec cp {} service_build/ \;
          else
            echo "No Python service artifacts found, continuing without them"
          fi

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.20.8
          cache: "npm"

      - name: 安装依赖
        run: npm ci

      - name: 构建Mac Intel版本
        run: npm run package:mac

      - name: 上传Mac Intel构建结果
        uses: actions/upload-artifact@v4
        with:
          name: mac-intel-app
          path: dist/*.dmg
          retention-days: 7

  # 构建Mac ARM版本
  build-mac-arm:
    runs-on: macos-14 # 使用ARM芯片的macOS运行器
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 打印芯片架构信息
        run: |
          # 检查CPU架构
          echo "CPU架构: $(uname -m)"
          echo "芯片: $(sysctl -n machdep.cpu.brand_string)"

      # 下载Python服务Mac ARM构建产物
      - name: 下载Python服务Mac ARM构建产物
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build-python-service.yml
          name: mac-arm-binaries
          path: temp_artifacts
          github_token: ${{ secrets.GITHUB_TOKEN }}
          if_no_artifact_found: warn
          workflow_conclusion: "" # 尝试获取任何状态的运行
          branch: "" # 尝试从任何分支获取
          check_artifacts: true
          search_artifacts: true

      # 确保service_build目录存在
      - name: 创建service_build目录
        run: mkdir -p service_build

      # 解压并移动文件到service_build
      - name: 处理Python服务文件
        run: |
          if [ -d "temp_artifacts" ] && [ "$(ls -A temp_artifacts)" ]; then
            # 创建临时目录用于解压
            mkdir -p temp_extracted
            
            # 查找并解压所有zip文件
            for zipfile in temp_artifacts/*.zip; do
              if [ -f "$zipfile" ]; then
                echo "Extracting $zipfile to temp_extracted"
                unzip -o "$zipfile" -d temp_extracted
              fi
            done
            
            # 移动解压后的文件到service_build
            if [ -d "temp_extracted" ] && [ "$(ls -A temp_extracted)" ]; then
              cp -R temp_extracted/* service_build/
            fi
            
            # 复制任何非zip文件
            find temp_artifacts -type f -not -name "*.zip" -exec cp {} service_build/ \;
          else
            echo "No Python service artifacts found, continuing without them"
          fi

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.20.8
          cache: "npm"

      - name: 安装依赖
        run: npm ci

      - name: 构建Mac ARM版本
        run: npm run package:mac

      - name: 上传Mac ARM构建结果
        uses: actions/upload-artifact@v4
        with:
          name: mac-arm-app
          path: dist/*.dmg
          retention-days: 7
